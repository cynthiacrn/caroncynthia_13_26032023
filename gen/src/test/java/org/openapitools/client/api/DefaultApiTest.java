/*
 * Transactions API
 * API to manage transactions
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Transaction;
import org.openapitools.client.model.TransactionInput;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Retrieve transactions for the current month
     *
     * Returns a list of all transactions for the current month
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsGetTest() throws ApiException {
        String authorization = null;
        List<Transaction> response = api.transactionsGet(authorization);

        // TODO: test validations
    }
    
    /**
     * Add a new transaction
     *
     * Adds a new transaction with the provided data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsPostTest() throws ApiException {
        String authorization = null;
        TransactionInput transaction = null;
        Transaction response = api.transactionsPost(authorization, transaction);

        // TODO: test validations
    }
    
    /**
     * Delete a transaction
     *
     * Deletes an existing transaction with the provided ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsTransactionIdDeleteTest() throws ApiException {
        String authorization = null;
        Integer transactionId = null;
        api.transactionsTransactionIdDelete(authorization, transactionId);

        // TODO: test validations
    }
    
    /**
     * Retrieve a transaction by ID
     *
     * Returns the details of a transaction with the provided ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsTransactionIdGetTest() throws ApiException {
        String authorization = null;
        Integer transactionId = null;
        Transaction response = api.transactionsTransactionIdGet(authorization, transactionId);

        // TODO: test validations
    }
    
    /**
     * Update a transaction
     *
     * Updates an existing transaction with the provided data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsTransactionIdPutTest() throws ApiException {
        String authorization = null;
        Integer transactionId = null;
        TransactionInput transaction = null;
        Transaction response = api.transactionsTransactionIdPut(authorization, transactionId, transaction);

        // TODO: test validations
    }
    
}
